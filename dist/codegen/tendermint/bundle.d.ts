import * as _80 from "./abci/types";
import * as _81 from "./crypto/keys";
import * as _82 from "./crypto/proof";
import * as _83 from "./libs/bits/types";
import * as _84 from "./p2p/types";
import * as _85 from "./types/block";
import * as _86 from "./types/evidence";
import * as _87 from "./types/params";
import * as _88 from "./types/types";
import * as _89 from "./types/validator";
import * as _90 from "./version/types";
export declare namespace tendermint {
    const abci: {
        checkTxTypeFromJSON(object: any): _80.CheckTxType;
        checkTxTypeToJSON(object: _80.CheckTxType): string;
        responseOfferSnapshot_ResultFromJSON(object: any): _80.ResponseOfferSnapshot_Result;
        responseOfferSnapshot_ResultToJSON(object: _80.ResponseOfferSnapshot_Result): string;
        responseApplySnapshotChunk_ResultFromJSON(object: any): _80.ResponseApplySnapshotChunk_Result;
        responseApplySnapshotChunk_ResultToJSON(object: _80.ResponseApplySnapshotChunk_Result): string;
        evidenceTypeFromJSON(object: any): _80.EvidenceType;
        evidenceTypeToJSON(object: _80.EvidenceType): string;
        CheckTxType: typeof _80.CheckTxType;
        CheckTxTypeSDKType: typeof _80.CheckTxType;
        CheckTxTypeAmino: typeof _80.CheckTxType;
        ResponseOfferSnapshot_Result: typeof _80.ResponseOfferSnapshot_Result;
        ResponseOfferSnapshot_ResultSDKType: typeof _80.ResponseOfferSnapshot_Result;
        ResponseOfferSnapshot_ResultAmino: typeof _80.ResponseOfferSnapshot_Result;
        ResponseApplySnapshotChunk_Result: typeof _80.ResponseApplySnapshotChunk_Result;
        ResponseApplySnapshotChunk_ResultSDKType: typeof _80.ResponseApplySnapshotChunk_Result;
        ResponseApplySnapshotChunk_ResultAmino: typeof _80.ResponseApplySnapshotChunk_Result;
        EvidenceType: typeof _80.EvidenceType;
        EvidenceTypeSDKType: typeof _80.EvidenceType;
        EvidenceTypeAmino: typeof _80.EvidenceType;
        Request: {
            typeUrl: string;
            is(o: any): o is _80.Request;
            isSDK(o: any): o is _80.RequestSDKType;
            isAmino(o: any): o is _80.RequestAmino;
            encode(message: _80.Request, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.Request;
            fromJSON(object: any): _80.Request;
            toJSON(message: _80.Request): import("..").JsonSafe<_80.Request>;
            fromPartial(object: Partial<_80.Request>): _80.Request;
            fromAmino(object: _80.RequestAmino): _80.Request;
            toAmino(message: _80.Request): _80.RequestAmino;
            fromAminoMsg(object: _80.RequestAminoMsg): _80.Request;
            fromProtoMsg(message: _80.RequestProtoMsg): _80.Request;
            toProto(message: _80.Request): Uint8Array;
            toProtoMsg(message: _80.Request): _80.RequestProtoMsg;
        };
        RequestEcho: {
            typeUrl: string;
            is(o: any): o is _80.RequestEcho;
            isSDK(o: any): o is _80.RequestEchoSDKType;
            isAmino(o: any): o is _80.RequestEchoAmino;
            encode(message: _80.RequestEcho, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestEcho;
            fromJSON(object: any): _80.RequestEcho;
            toJSON(message: _80.RequestEcho): import("..").JsonSafe<_80.RequestEcho>;
            fromPartial(object: Partial<_80.RequestEcho>): _80.RequestEcho;
            fromAmino(object: _80.RequestEchoAmino): _80.RequestEcho;
            toAmino(message: _80.RequestEcho): _80.RequestEchoAmino;
            fromAminoMsg(object: _80.RequestEchoAminoMsg): _80.RequestEcho;
            fromProtoMsg(message: _80.RequestEchoProtoMsg): _80.RequestEcho;
            toProto(message: _80.RequestEcho): Uint8Array;
            toProtoMsg(message: _80.RequestEcho): _80.RequestEchoProtoMsg;
        };
        RequestFlush: {
            typeUrl: string;
            is(o: any): o is _80.RequestFlush;
            isSDK(o: any): o is _80.RequestFlushSDKType;
            isAmino(o: any): o is _80.RequestFlushAmino;
            encode(_: _80.RequestFlush, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestFlush;
            fromJSON(_: any): _80.RequestFlush;
            toJSON(_: _80.RequestFlush): import("..").JsonSafe<_80.RequestFlush>;
            fromPartial(_: Partial<_80.RequestFlush>): _80.RequestFlush;
            fromAmino(_: _80.RequestFlushAmino): _80.RequestFlush;
            toAmino(_: _80.RequestFlush): _80.RequestFlushAmino;
            fromAminoMsg(object: _80.RequestFlushAminoMsg): _80.RequestFlush;
            fromProtoMsg(message: _80.RequestFlushProtoMsg): _80.RequestFlush;
            toProto(message: _80.RequestFlush): Uint8Array;
            toProtoMsg(message: _80.RequestFlush): _80.RequestFlushProtoMsg;
        };
        RequestInfo: {
            typeUrl: string;
            is(o: any): o is _80.RequestInfo;
            isSDK(o: any): o is _80.RequestInfoSDKType;
            isAmino(o: any): o is _80.RequestInfoAmino;
            encode(message: _80.RequestInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestInfo;
            fromJSON(object: any): _80.RequestInfo;
            toJSON(message: _80.RequestInfo): import("..").JsonSafe<_80.RequestInfo>;
            fromPartial(object: Partial<_80.RequestInfo>): _80.RequestInfo;
            fromAmino(object: _80.RequestInfoAmino): _80.RequestInfo;
            toAmino(message: _80.RequestInfo): _80.RequestInfoAmino;
            fromAminoMsg(object: _80.RequestInfoAminoMsg): _80.RequestInfo;
            fromProtoMsg(message: _80.RequestInfoProtoMsg): _80.RequestInfo;
            toProto(message: _80.RequestInfo): Uint8Array;
            toProtoMsg(message: _80.RequestInfo): _80.RequestInfoProtoMsg;
        };
        RequestSetOption: {
            typeUrl: string;
            is(o: any): o is _80.RequestSetOption;
            isSDK(o: any): o is _80.RequestSetOptionSDKType;
            isAmino(o: any): o is _80.RequestSetOptionAmino;
            encode(message: _80.RequestSetOption, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestSetOption;
            fromJSON(object: any): _80.RequestSetOption;
            toJSON(message: _80.RequestSetOption): import("..").JsonSafe<_80.RequestSetOption>;
            fromPartial(object: Partial<_80.RequestSetOption>): _80.RequestSetOption;
            fromAmino(object: _80.RequestSetOptionAmino): _80.RequestSetOption;
            toAmino(message: _80.RequestSetOption): _80.RequestSetOptionAmino;
            fromAminoMsg(object: _80.RequestSetOptionAminoMsg): _80.RequestSetOption;
            fromProtoMsg(message: _80.RequestSetOptionProtoMsg): _80.RequestSetOption;
            toProto(message: _80.RequestSetOption): Uint8Array;
            toProtoMsg(message: _80.RequestSetOption): _80.RequestSetOptionProtoMsg;
        };
        RequestInitChain: {
            typeUrl: string;
            is(o: any): o is _80.RequestInitChain;
            isSDK(o: any): o is _80.RequestInitChainSDKType;
            isAmino(o: any): o is _80.RequestInitChainAmino;
            encode(message: _80.RequestInitChain, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestInitChain;
            fromJSON(object: any): _80.RequestInitChain;
            toJSON(message: _80.RequestInitChain): import("..").JsonSafe<_80.RequestInitChain>;
            fromPartial(object: Partial<_80.RequestInitChain>): _80.RequestInitChain;
            fromAmino(object: _80.RequestInitChainAmino): _80.RequestInitChain;
            toAmino(message: _80.RequestInitChain): _80.RequestInitChainAmino;
            fromAminoMsg(object: _80.RequestInitChainAminoMsg): _80.RequestInitChain;
            fromProtoMsg(message: _80.RequestInitChainProtoMsg): _80.RequestInitChain;
            toProto(message: _80.RequestInitChain): Uint8Array;
            toProtoMsg(message: _80.RequestInitChain): _80.RequestInitChainProtoMsg;
        };
        RequestQuery: {
            typeUrl: string;
            is(o: any): o is _80.RequestQuery;
            isSDK(o: any): o is _80.RequestQuerySDKType;
            isAmino(o: any): o is _80.RequestQueryAmino;
            encode(message: _80.RequestQuery, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestQuery;
            fromJSON(object: any): _80.RequestQuery;
            toJSON(message: _80.RequestQuery): import("..").JsonSafe<_80.RequestQuery>;
            fromPartial(object: Partial<_80.RequestQuery>): _80.RequestQuery;
            fromAmino(object: _80.RequestQueryAmino): _80.RequestQuery;
            toAmino(message: _80.RequestQuery): _80.RequestQueryAmino;
            fromAminoMsg(object: _80.RequestQueryAminoMsg): _80.RequestQuery;
            fromProtoMsg(message: _80.RequestQueryProtoMsg): _80.RequestQuery;
            toProto(message: _80.RequestQuery): Uint8Array;
            toProtoMsg(message: _80.RequestQuery): _80.RequestQueryProtoMsg;
        };
        RequestBeginBlock: {
            typeUrl: string;
            is(o: any): o is _80.RequestBeginBlock;
            isSDK(o: any): o is _80.RequestBeginBlockSDKType;
            isAmino(o: any): o is _80.RequestBeginBlockAmino;
            encode(message: _80.RequestBeginBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestBeginBlock;
            fromJSON(object: any): _80.RequestBeginBlock;
            toJSON(message: _80.RequestBeginBlock): import("..").JsonSafe<_80.RequestBeginBlock>;
            fromPartial(object: Partial<_80.RequestBeginBlock>): _80.RequestBeginBlock;
            fromAmino(object: _80.RequestBeginBlockAmino): _80.RequestBeginBlock;
            toAmino(message: _80.RequestBeginBlock): _80.RequestBeginBlockAmino;
            fromAminoMsg(object: _80.RequestBeginBlockAminoMsg): _80.RequestBeginBlock;
            fromProtoMsg(message: _80.RequestBeginBlockProtoMsg): _80.RequestBeginBlock;
            toProto(message: _80.RequestBeginBlock): Uint8Array;
            toProtoMsg(message: _80.RequestBeginBlock): _80.RequestBeginBlockProtoMsg;
        };
        RequestCheckTx: {
            typeUrl: string;
            is(o: any): o is _80.RequestCheckTx;
            isSDK(o: any): o is _80.RequestCheckTxSDKType;
            isAmino(o: any): o is _80.RequestCheckTxAmino;
            encode(message: _80.RequestCheckTx, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestCheckTx;
            fromJSON(object: any): _80.RequestCheckTx;
            toJSON(message: _80.RequestCheckTx): import("..").JsonSafe<_80.RequestCheckTx>;
            fromPartial(object: Partial<_80.RequestCheckTx>): _80.RequestCheckTx;
            fromAmino(object: _80.RequestCheckTxAmino): _80.RequestCheckTx;
            toAmino(message: _80.RequestCheckTx): _80.RequestCheckTxAmino;
            fromAminoMsg(object: _80.RequestCheckTxAminoMsg): _80.RequestCheckTx;
            fromProtoMsg(message: _80.RequestCheckTxProtoMsg): _80.RequestCheckTx;
            toProto(message: _80.RequestCheckTx): Uint8Array;
            toProtoMsg(message: _80.RequestCheckTx): _80.RequestCheckTxProtoMsg;
        };
        RequestDeliverTx: {
            typeUrl: string;
            is(o: any): o is _80.RequestDeliverTx;
            isSDK(o: any): o is _80.RequestDeliverTxSDKType;
            isAmino(o: any): o is _80.RequestDeliverTxAmino;
            encode(message: _80.RequestDeliverTx, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestDeliverTx;
            fromJSON(object: any): _80.RequestDeliverTx;
            toJSON(message: _80.RequestDeliverTx): import("..").JsonSafe<_80.RequestDeliverTx>;
            fromPartial(object: Partial<_80.RequestDeliverTx>): _80.RequestDeliverTx;
            fromAmino(object: _80.RequestDeliverTxAmino): _80.RequestDeliverTx;
            toAmino(message: _80.RequestDeliverTx): _80.RequestDeliverTxAmino;
            fromAminoMsg(object: _80.RequestDeliverTxAminoMsg): _80.RequestDeliverTx;
            fromProtoMsg(message: _80.RequestDeliverTxProtoMsg): _80.RequestDeliverTx;
            toProto(message: _80.RequestDeliverTx): Uint8Array;
            toProtoMsg(message: _80.RequestDeliverTx): _80.RequestDeliverTxProtoMsg;
        };
        RequestEndBlock: {
            typeUrl: string;
            is(o: any): o is _80.RequestEndBlock;
            isSDK(o: any): o is _80.RequestEndBlockSDKType;
            isAmino(o: any): o is _80.RequestEndBlockAmino;
            encode(message: _80.RequestEndBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestEndBlock;
            fromJSON(object: any): _80.RequestEndBlock;
            toJSON(message: _80.RequestEndBlock): import("..").JsonSafe<_80.RequestEndBlock>;
            fromPartial(object: Partial<_80.RequestEndBlock>): _80.RequestEndBlock;
            fromAmino(object: _80.RequestEndBlockAmino): _80.RequestEndBlock;
            toAmino(message: _80.RequestEndBlock): _80.RequestEndBlockAmino;
            fromAminoMsg(object: _80.RequestEndBlockAminoMsg): _80.RequestEndBlock;
            fromProtoMsg(message: _80.RequestEndBlockProtoMsg): _80.RequestEndBlock;
            toProto(message: _80.RequestEndBlock): Uint8Array;
            toProtoMsg(message: _80.RequestEndBlock): _80.RequestEndBlockProtoMsg;
        };
        RequestCommit: {
            typeUrl: string;
            is(o: any): o is _80.RequestCommit;
            isSDK(o: any): o is _80.RequestCommitSDKType;
            isAmino(o: any): o is _80.RequestCommitAmino;
            encode(_: _80.RequestCommit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestCommit;
            fromJSON(_: any): _80.RequestCommit;
            toJSON(_: _80.RequestCommit): import("..").JsonSafe<_80.RequestCommit>;
            fromPartial(_: Partial<_80.RequestCommit>): _80.RequestCommit;
            fromAmino(_: _80.RequestCommitAmino): _80.RequestCommit;
            toAmino(_: _80.RequestCommit): _80.RequestCommitAmino;
            fromAminoMsg(object: _80.RequestCommitAminoMsg): _80.RequestCommit;
            fromProtoMsg(message: _80.RequestCommitProtoMsg): _80.RequestCommit;
            toProto(message: _80.RequestCommit): Uint8Array;
            toProtoMsg(message: _80.RequestCommit): _80.RequestCommitProtoMsg;
        };
        RequestListSnapshots: {
            typeUrl: string;
            is(o: any): o is _80.RequestListSnapshots;
            isSDK(o: any): o is _80.RequestListSnapshotsSDKType;
            isAmino(o: any): o is _80.RequestListSnapshotsAmino;
            encode(_: _80.RequestListSnapshots, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestListSnapshots;
            fromJSON(_: any): _80.RequestListSnapshots;
            toJSON(_: _80.RequestListSnapshots): import("..").JsonSafe<_80.RequestListSnapshots>;
            fromPartial(_: Partial<_80.RequestListSnapshots>): _80.RequestListSnapshots;
            fromAmino(_: _80.RequestListSnapshotsAmino): _80.RequestListSnapshots;
            toAmino(_: _80.RequestListSnapshots): _80.RequestListSnapshotsAmino;
            fromAminoMsg(object: _80.RequestListSnapshotsAminoMsg): _80.RequestListSnapshots;
            fromProtoMsg(message: _80.RequestListSnapshotsProtoMsg): _80.RequestListSnapshots;
            toProto(message: _80.RequestListSnapshots): Uint8Array;
            toProtoMsg(message: _80.RequestListSnapshots): _80.RequestListSnapshotsProtoMsg;
        };
        RequestOfferSnapshot: {
            typeUrl: string;
            is(o: any): o is _80.RequestOfferSnapshot;
            isSDK(o: any): o is _80.RequestOfferSnapshotSDKType;
            isAmino(o: any): o is _80.RequestOfferSnapshotAmino;
            encode(message: _80.RequestOfferSnapshot, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestOfferSnapshot;
            fromJSON(object: any): _80.RequestOfferSnapshot;
            toJSON(message: _80.RequestOfferSnapshot): import("..").JsonSafe<_80.RequestOfferSnapshot>;
            fromPartial(object: Partial<_80.RequestOfferSnapshot>): _80.RequestOfferSnapshot;
            fromAmino(object: _80.RequestOfferSnapshotAmino): _80.RequestOfferSnapshot;
            toAmino(message: _80.RequestOfferSnapshot): _80.RequestOfferSnapshotAmino;
            fromAminoMsg(object: _80.RequestOfferSnapshotAminoMsg): _80.RequestOfferSnapshot;
            fromProtoMsg(message: _80.RequestOfferSnapshotProtoMsg): _80.RequestOfferSnapshot;
            toProto(message: _80.RequestOfferSnapshot): Uint8Array;
            toProtoMsg(message: _80.RequestOfferSnapshot): _80.RequestOfferSnapshotProtoMsg;
        };
        RequestLoadSnapshotChunk: {
            typeUrl: string;
            is(o: any): o is _80.RequestLoadSnapshotChunk;
            isSDK(o: any): o is _80.RequestLoadSnapshotChunkSDKType;
            isAmino(o: any): o is _80.RequestLoadSnapshotChunkAmino;
            encode(message: _80.RequestLoadSnapshotChunk, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestLoadSnapshotChunk;
            fromJSON(object: any): _80.RequestLoadSnapshotChunk;
            toJSON(message: _80.RequestLoadSnapshotChunk): import("..").JsonSafe<_80.RequestLoadSnapshotChunk>;
            fromPartial(object: Partial<_80.RequestLoadSnapshotChunk>): _80.RequestLoadSnapshotChunk;
            fromAmino(object: _80.RequestLoadSnapshotChunkAmino): _80.RequestLoadSnapshotChunk;
            toAmino(message: _80.RequestLoadSnapshotChunk): _80.RequestLoadSnapshotChunkAmino;
            fromAminoMsg(object: _80.RequestLoadSnapshotChunkAminoMsg): _80.RequestLoadSnapshotChunk;
            fromProtoMsg(message: _80.RequestLoadSnapshotChunkProtoMsg): _80.RequestLoadSnapshotChunk;
            toProto(message: _80.RequestLoadSnapshotChunk): Uint8Array;
            toProtoMsg(message: _80.RequestLoadSnapshotChunk): _80.RequestLoadSnapshotChunkProtoMsg;
        };
        RequestApplySnapshotChunk: {
            typeUrl: string;
            is(o: any): o is _80.RequestApplySnapshotChunk;
            isSDK(o: any): o is _80.RequestApplySnapshotChunkSDKType;
            isAmino(o: any): o is _80.RequestApplySnapshotChunkAmino;
            encode(message: _80.RequestApplySnapshotChunk, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.RequestApplySnapshotChunk;
            fromJSON(object: any): _80.RequestApplySnapshotChunk;
            toJSON(message: _80.RequestApplySnapshotChunk): import("..").JsonSafe<_80.RequestApplySnapshotChunk>;
            fromPartial(object: Partial<_80.RequestApplySnapshotChunk>): _80.RequestApplySnapshotChunk;
            fromAmino(object: _80.RequestApplySnapshotChunkAmino): _80.RequestApplySnapshotChunk;
            toAmino(message: _80.RequestApplySnapshotChunk): _80.RequestApplySnapshotChunkAmino;
            fromAminoMsg(object: _80.RequestApplySnapshotChunkAminoMsg): _80.RequestApplySnapshotChunk;
            fromProtoMsg(message: _80.RequestApplySnapshotChunkProtoMsg): _80.RequestApplySnapshotChunk;
            toProto(message: _80.RequestApplySnapshotChunk): Uint8Array;
            toProtoMsg(message: _80.RequestApplySnapshotChunk): _80.RequestApplySnapshotChunkProtoMsg;
        };
        Response: {
            typeUrl: string;
            is(o: any): o is _80.Response;
            isSDK(o: any): o is _80.ResponseSDKType;
            isAmino(o: any): o is _80.ResponseAmino;
            encode(message: _80.Response, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.Response;
            fromJSON(object: any): _80.Response;
            toJSON(message: _80.Response): import("..").JsonSafe<_80.Response>;
            fromPartial(object: Partial<_80.Response>): _80.Response;
            fromAmino(object: _80.ResponseAmino): _80.Response;
            toAmino(message: _80.Response): _80.ResponseAmino;
            fromAminoMsg(object: _80.ResponseAminoMsg): _80.Response;
            fromProtoMsg(message: _80.ResponseProtoMsg): _80.Response;
            toProto(message: _80.Response): Uint8Array;
            toProtoMsg(message: _80.Response): _80.ResponseProtoMsg;
        };
        ResponseException: {
            typeUrl: string;
            is(o: any): o is _80.ResponseException;
            isSDK(o: any): o is _80.ResponseExceptionSDKType;
            isAmino(o: any): o is _80.ResponseExceptionAmino;
            encode(message: _80.ResponseException, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseException;
            fromJSON(object: any): _80.ResponseException;
            toJSON(message: _80.ResponseException): import("..").JsonSafe<_80.ResponseException>;
            fromPartial(object: Partial<_80.ResponseException>): _80.ResponseException;
            fromAmino(object: _80.ResponseExceptionAmino): _80.ResponseException;
            toAmino(message: _80.ResponseException): _80.ResponseExceptionAmino;
            fromAminoMsg(object: _80.ResponseExceptionAminoMsg): _80.ResponseException;
            fromProtoMsg(message: _80.ResponseExceptionProtoMsg): _80.ResponseException;
            toProto(message: _80.ResponseException): Uint8Array;
            toProtoMsg(message: _80.ResponseException): _80.ResponseExceptionProtoMsg;
        };
        ResponseEcho: {
            typeUrl: string;
            is(o: any): o is _80.ResponseEcho;
            isSDK(o: any): o is _80.ResponseEchoSDKType;
            isAmino(o: any): o is _80.ResponseEchoAmino;
            encode(message: _80.ResponseEcho, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseEcho;
            fromJSON(object: any): _80.ResponseEcho;
            toJSON(message: _80.ResponseEcho): import("..").JsonSafe<_80.ResponseEcho>;
            fromPartial(object: Partial<_80.ResponseEcho>): _80.ResponseEcho;
            fromAmino(object: _80.ResponseEchoAmino): _80.ResponseEcho;
            toAmino(message: _80.ResponseEcho): _80.ResponseEchoAmino;
            fromAminoMsg(object: _80.ResponseEchoAminoMsg): _80.ResponseEcho;
            fromProtoMsg(message: _80.ResponseEchoProtoMsg): _80.ResponseEcho;
            toProto(message: _80.ResponseEcho): Uint8Array;
            toProtoMsg(message: _80.ResponseEcho): _80.ResponseEchoProtoMsg;
        };
        ResponseFlush: {
            typeUrl: string;
            is(o: any): o is _80.ResponseFlush;
            isSDK(o: any): o is _80.ResponseFlushSDKType;
            isAmino(o: any): o is _80.ResponseFlushAmino;
            encode(_: _80.ResponseFlush, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseFlush;
            fromJSON(_: any): _80.ResponseFlush;
            toJSON(_: _80.ResponseFlush): import("..").JsonSafe<_80.ResponseFlush>;
            fromPartial(_: Partial<_80.ResponseFlush>): _80.ResponseFlush;
            fromAmino(_: _80.ResponseFlushAmino): _80.ResponseFlush;
            toAmino(_: _80.ResponseFlush): _80.ResponseFlushAmino;
            fromAminoMsg(object: _80.ResponseFlushAminoMsg): _80.ResponseFlush;
            fromProtoMsg(message: _80.ResponseFlushProtoMsg): _80.ResponseFlush;
            toProto(message: _80.ResponseFlush): Uint8Array;
            toProtoMsg(message: _80.ResponseFlush): _80.ResponseFlushProtoMsg;
        };
        ResponseInfo: {
            typeUrl: string;
            is(o: any): o is _80.ResponseInfo;
            isSDK(o: any): o is _80.ResponseInfoSDKType;
            isAmino(o: any): o is _80.ResponseInfoAmino;
            encode(message: _80.ResponseInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseInfo;
            fromJSON(object: any): _80.ResponseInfo;
            toJSON(message: _80.ResponseInfo): import("..").JsonSafe<_80.ResponseInfo>;
            fromPartial(object: Partial<_80.ResponseInfo>): _80.ResponseInfo;
            fromAmino(object: _80.ResponseInfoAmino): _80.ResponseInfo;
            toAmino(message: _80.ResponseInfo): _80.ResponseInfoAmino;
            fromAminoMsg(object: _80.ResponseInfoAminoMsg): _80.ResponseInfo;
            fromProtoMsg(message: _80.ResponseInfoProtoMsg): _80.ResponseInfo;
            toProto(message: _80.ResponseInfo): Uint8Array;
            toProtoMsg(message: _80.ResponseInfo): _80.ResponseInfoProtoMsg;
        };
        ResponseSetOption: {
            typeUrl: string;
            is(o: any): o is _80.ResponseSetOption;
            isSDK(o: any): o is _80.ResponseSetOptionSDKType;
            isAmino(o: any): o is _80.ResponseSetOptionAmino;
            encode(message: _80.ResponseSetOption, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseSetOption;
            fromJSON(object: any): _80.ResponseSetOption;
            toJSON(message: _80.ResponseSetOption): import("..").JsonSafe<_80.ResponseSetOption>;
            fromPartial(object: Partial<_80.ResponseSetOption>): _80.ResponseSetOption;
            fromAmino(object: _80.ResponseSetOptionAmino): _80.ResponseSetOption;
            toAmino(message: _80.ResponseSetOption): _80.ResponseSetOptionAmino;
            fromAminoMsg(object: _80.ResponseSetOptionAminoMsg): _80.ResponseSetOption;
            fromProtoMsg(message: _80.ResponseSetOptionProtoMsg): _80.ResponseSetOption;
            toProto(message: _80.ResponseSetOption): Uint8Array;
            toProtoMsg(message: _80.ResponseSetOption): _80.ResponseSetOptionProtoMsg;
        };
        ResponseInitChain: {
            typeUrl: string;
            is(o: any): o is _80.ResponseInitChain;
            isSDK(o: any): o is _80.ResponseInitChainSDKType;
            isAmino(o: any): o is _80.ResponseInitChainAmino;
            encode(message: _80.ResponseInitChain, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseInitChain;
            fromJSON(object: any): _80.ResponseInitChain;
            toJSON(message: _80.ResponseInitChain): import("..").JsonSafe<_80.ResponseInitChain>;
            fromPartial(object: Partial<_80.ResponseInitChain>): _80.ResponseInitChain;
            fromAmino(object: _80.ResponseInitChainAmino): _80.ResponseInitChain;
            toAmino(message: _80.ResponseInitChain): _80.ResponseInitChainAmino;
            fromAminoMsg(object: _80.ResponseInitChainAminoMsg): _80.ResponseInitChain;
            fromProtoMsg(message: _80.ResponseInitChainProtoMsg): _80.ResponseInitChain;
            toProto(message: _80.ResponseInitChain): Uint8Array;
            toProtoMsg(message: _80.ResponseInitChain): _80.ResponseInitChainProtoMsg;
        };
        ResponseQuery: {
            typeUrl: string;
            is(o: any): o is _80.ResponseQuery;
            isSDK(o: any): o is _80.ResponseQuerySDKType;
            isAmino(o: any): o is _80.ResponseQueryAmino;
            encode(message: _80.ResponseQuery, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseQuery;
            fromJSON(object: any): _80.ResponseQuery;
            toJSON(message: _80.ResponseQuery): import("..").JsonSafe<_80.ResponseQuery>;
            fromPartial(object: Partial<_80.ResponseQuery>): _80.ResponseQuery;
            fromAmino(object: _80.ResponseQueryAmino): _80.ResponseQuery;
            toAmino(message: _80.ResponseQuery): _80.ResponseQueryAmino;
            fromAminoMsg(object: _80.ResponseQueryAminoMsg): _80.ResponseQuery;
            fromProtoMsg(message: _80.ResponseQueryProtoMsg): _80.ResponseQuery;
            toProto(message: _80.ResponseQuery): Uint8Array;
            toProtoMsg(message: _80.ResponseQuery): _80.ResponseQueryProtoMsg;
        };
        ResponseBeginBlock: {
            typeUrl: string;
            is(o: any): o is _80.ResponseBeginBlock;
            isSDK(o: any): o is _80.ResponseBeginBlockSDKType;
            isAmino(o: any): o is _80.ResponseBeginBlockAmino;
            encode(message: _80.ResponseBeginBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseBeginBlock;
            fromJSON(object: any): _80.ResponseBeginBlock;
            toJSON(message: _80.ResponseBeginBlock): import("..").JsonSafe<_80.ResponseBeginBlock>;
            fromPartial(object: Partial<_80.ResponseBeginBlock>): _80.ResponseBeginBlock;
            fromAmino(object: _80.ResponseBeginBlockAmino): _80.ResponseBeginBlock;
            toAmino(message: _80.ResponseBeginBlock): _80.ResponseBeginBlockAmino;
            fromAminoMsg(object: _80.ResponseBeginBlockAminoMsg): _80.ResponseBeginBlock;
            fromProtoMsg(message: _80.ResponseBeginBlockProtoMsg): _80.ResponseBeginBlock;
            toProto(message: _80.ResponseBeginBlock): Uint8Array;
            toProtoMsg(message: _80.ResponseBeginBlock): _80.ResponseBeginBlockProtoMsg;
        };
        ResponseCheckTx: {
            typeUrl: string;
            is(o: any): o is _80.ResponseCheckTx;
            isSDK(o: any): o is _80.ResponseCheckTxSDKType;
            isAmino(o: any): o is _80.ResponseCheckTxAmino;
            encode(message: _80.ResponseCheckTx, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseCheckTx;
            fromJSON(object: any): _80.ResponseCheckTx;
            toJSON(message: _80.ResponseCheckTx): import("..").JsonSafe<_80.ResponseCheckTx>;
            fromPartial(object: Partial<_80.ResponseCheckTx>): _80.ResponseCheckTx;
            fromAmino(object: _80.ResponseCheckTxAmino): _80.ResponseCheckTx;
            toAmino(message: _80.ResponseCheckTx): _80.ResponseCheckTxAmino;
            fromAminoMsg(object: _80.ResponseCheckTxAminoMsg): _80.ResponseCheckTx;
            fromProtoMsg(message: _80.ResponseCheckTxProtoMsg): _80.ResponseCheckTx;
            toProto(message: _80.ResponseCheckTx): Uint8Array;
            toProtoMsg(message: _80.ResponseCheckTx): _80.ResponseCheckTxProtoMsg;
        };
        ResponseDeliverTx: {
            typeUrl: string;
            is(o: any): o is _80.ResponseDeliverTx;
            isSDK(o: any): o is _80.ResponseDeliverTxSDKType;
            isAmino(o: any): o is _80.ResponseDeliverTxAmino;
            encode(message: _80.ResponseDeliverTx, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseDeliverTx;
            fromJSON(object: any): _80.ResponseDeliverTx;
            toJSON(message: _80.ResponseDeliverTx): import("..").JsonSafe<_80.ResponseDeliverTx>;
            fromPartial(object: Partial<_80.ResponseDeliverTx>): _80.ResponseDeliverTx;
            fromAmino(object: _80.ResponseDeliverTxAmino): _80.ResponseDeliverTx;
            toAmino(message: _80.ResponseDeliverTx): _80.ResponseDeliverTxAmino;
            fromAminoMsg(object: _80.ResponseDeliverTxAminoMsg): _80.ResponseDeliverTx;
            fromProtoMsg(message: _80.ResponseDeliverTxProtoMsg): _80.ResponseDeliverTx;
            toProto(message: _80.ResponseDeliverTx): Uint8Array;
            toProtoMsg(message: _80.ResponseDeliverTx): _80.ResponseDeliverTxProtoMsg;
        };
        ResponseEndBlock: {
            typeUrl: string;
            is(o: any): o is _80.ResponseEndBlock;
            isSDK(o: any): o is _80.ResponseEndBlockSDKType;
            isAmino(o: any): o is _80.ResponseEndBlockAmino;
            encode(message: _80.ResponseEndBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseEndBlock;
            fromJSON(object: any): _80.ResponseEndBlock;
            toJSON(message: _80.ResponseEndBlock): import("..").JsonSafe<_80.ResponseEndBlock>;
            fromPartial(object: Partial<_80.ResponseEndBlock>): _80.ResponseEndBlock;
            fromAmino(object: _80.ResponseEndBlockAmino): _80.ResponseEndBlock;
            toAmino(message: _80.ResponseEndBlock): _80.ResponseEndBlockAmino;
            fromAminoMsg(object: _80.ResponseEndBlockAminoMsg): _80.ResponseEndBlock;
            fromProtoMsg(message: _80.ResponseEndBlockProtoMsg): _80.ResponseEndBlock;
            toProto(message: _80.ResponseEndBlock): Uint8Array;
            toProtoMsg(message: _80.ResponseEndBlock): _80.ResponseEndBlockProtoMsg;
        };
        ResponseCommit: {
            typeUrl: string;
            is(o: any): o is _80.ResponseCommit;
            isSDK(o: any): o is _80.ResponseCommitSDKType;
            isAmino(o: any): o is _80.ResponseCommitAmino;
            encode(message: _80.ResponseCommit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseCommit;
            fromJSON(object: any): _80.ResponseCommit;
            toJSON(message: _80.ResponseCommit): import("..").JsonSafe<_80.ResponseCommit>;
            fromPartial(object: Partial<_80.ResponseCommit>): _80.ResponseCommit;
            fromAmino(object: _80.ResponseCommitAmino): _80.ResponseCommit;
            toAmino(message: _80.ResponseCommit): _80.ResponseCommitAmino;
            fromAminoMsg(object: _80.ResponseCommitAminoMsg): _80.ResponseCommit;
            fromProtoMsg(message: _80.ResponseCommitProtoMsg): _80.ResponseCommit;
            toProto(message: _80.ResponseCommit): Uint8Array;
            toProtoMsg(message: _80.ResponseCommit): _80.ResponseCommitProtoMsg;
        };
        ResponseListSnapshots: {
            typeUrl: string;
            is(o: any): o is _80.ResponseListSnapshots;
            isSDK(o: any): o is _80.ResponseListSnapshotsSDKType;
            isAmino(o: any): o is _80.ResponseListSnapshotsAmino;
            encode(message: _80.ResponseListSnapshots, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseListSnapshots;
            fromJSON(object: any): _80.ResponseListSnapshots;
            toJSON(message: _80.ResponseListSnapshots): import("..").JsonSafe<_80.ResponseListSnapshots>;
            fromPartial(object: Partial<_80.ResponseListSnapshots>): _80.ResponseListSnapshots;
            fromAmino(object: _80.ResponseListSnapshotsAmino): _80.ResponseListSnapshots;
            toAmino(message: _80.ResponseListSnapshots): _80.ResponseListSnapshotsAmino;
            fromAminoMsg(object: _80.ResponseListSnapshotsAminoMsg): _80.ResponseListSnapshots;
            fromProtoMsg(message: _80.ResponseListSnapshotsProtoMsg): _80.ResponseListSnapshots;
            toProto(message: _80.ResponseListSnapshots): Uint8Array;
            toProtoMsg(message: _80.ResponseListSnapshots): _80.ResponseListSnapshotsProtoMsg;
        };
        ResponseOfferSnapshot: {
            typeUrl: string;
            is(o: any): o is _80.ResponseOfferSnapshot;
            isSDK(o: any): o is _80.ResponseOfferSnapshotSDKType;
            isAmino(o: any): o is _80.ResponseOfferSnapshotAmino;
            encode(message: _80.ResponseOfferSnapshot, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseOfferSnapshot;
            fromJSON(object: any): _80.ResponseOfferSnapshot;
            toJSON(message: _80.ResponseOfferSnapshot): import("..").JsonSafe<_80.ResponseOfferSnapshot>;
            fromPartial(object: Partial<_80.ResponseOfferSnapshot>): _80.ResponseOfferSnapshot;
            fromAmino(object: _80.ResponseOfferSnapshotAmino): _80.ResponseOfferSnapshot;
            toAmino(message: _80.ResponseOfferSnapshot): _80.ResponseOfferSnapshotAmino;
            fromAminoMsg(object: _80.ResponseOfferSnapshotAminoMsg): _80.ResponseOfferSnapshot;
            fromProtoMsg(message: _80.ResponseOfferSnapshotProtoMsg): _80.ResponseOfferSnapshot;
            toProto(message: _80.ResponseOfferSnapshot): Uint8Array;
            toProtoMsg(message: _80.ResponseOfferSnapshot): _80.ResponseOfferSnapshotProtoMsg;
        };
        ResponseLoadSnapshotChunk: {
            typeUrl: string;
            is(o: any): o is _80.ResponseLoadSnapshotChunk;
            isSDK(o: any): o is _80.ResponseLoadSnapshotChunkSDKType;
            isAmino(o: any): o is _80.ResponseLoadSnapshotChunkAmino;
            encode(message: _80.ResponseLoadSnapshotChunk, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseLoadSnapshotChunk;
            fromJSON(object: any): _80.ResponseLoadSnapshotChunk;
            toJSON(message: _80.ResponseLoadSnapshotChunk): import("..").JsonSafe<_80.ResponseLoadSnapshotChunk>;
            fromPartial(object: Partial<_80.ResponseLoadSnapshotChunk>): _80.ResponseLoadSnapshotChunk;
            fromAmino(object: _80.ResponseLoadSnapshotChunkAmino): _80.ResponseLoadSnapshotChunk;
            toAmino(message: _80.ResponseLoadSnapshotChunk): _80.ResponseLoadSnapshotChunkAmino;
            fromAminoMsg(object: _80.ResponseLoadSnapshotChunkAminoMsg): _80.ResponseLoadSnapshotChunk;
            fromProtoMsg(message: _80.ResponseLoadSnapshotChunkProtoMsg): _80.ResponseLoadSnapshotChunk;
            toProto(message: _80.ResponseLoadSnapshotChunk): Uint8Array;
            toProtoMsg(message: _80.ResponseLoadSnapshotChunk): _80.ResponseLoadSnapshotChunkProtoMsg;
        };
        ResponseApplySnapshotChunk: {
            typeUrl: string;
            is(o: any): o is _80.ResponseApplySnapshotChunk;
            isSDK(o: any): o is _80.ResponseApplySnapshotChunkSDKType;
            isAmino(o: any): o is _80.ResponseApplySnapshotChunkAmino;
            encode(message: _80.ResponseApplySnapshotChunk, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ResponseApplySnapshotChunk;
            fromJSON(object: any): _80.ResponseApplySnapshotChunk;
            toJSON(message: _80.ResponseApplySnapshotChunk): import("..").JsonSafe<_80.ResponseApplySnapshotChunk>;
            fromPartial(object: Partial<_80.ResponseApplySnapshotChunk>): _80.ResponseApplySnapshotChunk;
            fromAmino(object: _80.ResponseApplySnapshotChunkAmino): _80.ResponseApplySnapshotChunk;
            toAmino(message: _80.ResponseApplySnapshotChunk): _80.ResponseApplySnapshotChunkAmino;
            fromAminoMsg(object: _80.ResponseApplySnapshotChunkAminoMsg): _80.ResponseApplySnapshotChunk;
            fromProtoMsg(message: _80.ResponseApplySnapshotChunkProtoMsg): _80.ResponseApplySnapshotChunk;
            toProto(message: _80.ResponseApplySnapshotChunk): Uint8Array;
            toProtoMsg(message: _80.ResponseApplySnapshotChunk): _80.ResponseApplySnapshotChunkProtoMsg;
        };
        ConsensusParams: {
            typeUrl: string;
            is(o: any): o is _80.ConsensusParams;
            isSDK(o: any): o is _80.ConsensusParamsSDKType;
            isAmino(o: any): o is _80.ConsensusParamsAmino;
            encode(message: _80.ConsensusParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ConsensusParams;
            fromJSON(object: any): _80.ConsensusParams;
            toJSON(message: _80.ConsensusParams): import("..").JsonSafe<_80.ConsensusParams>;
            fromPartial(object: Partial<_80.ConsensusParams>): _80.ConsensusParams;
            fromAmino(object: _80.ConsensusParamsAmino): _80.ConsensusParams;
            toAmino(message: _80.ConsensusParams): _80.ConsensusParamsAmino;
            fromAminoMsg(object: _80.ConsensusParamsAminoMsg): _80.ConsensusParams;
            fromProtoMsg(message: _80.ConsensusParamsProtoMsg): _80.ConsensusParams;
            toProto(message: _80.ConsensusParams): Uint8Array;
            toProtoMsg(message: _80.ConsensusParams): _80.ConsensusParamsProtoMsg;
        };
        BlockParams: {
            typeUrl: string;
            is(o: any): o is _80.BlockParams;
            isSDK(o: any): o is _80.BlockParamsSDKType;
            isAmino(o: any): o is _80.BlockParamsAmino;
            encode(message: _80.BlockParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.BlockParams;
            fromJSON(object: any): _80.BlockParams;
            toJSON(message: _80.BlockParams): import("..").JsonSafe<_80.BlockParams>;
            fromPartial(object: Partial<_80.BlockParams>): _80.BlockParams;
            fromAmino(object: _80.BlockParamsAmino): _80.BlockParams;
            toAmino(message: _80.BlockParams): _80.BlockParamsAmino;
            fromAminoMsg(object: _80.BlockParamsAminoMsg): _80.BlockParams;
            fromProtoMsg(message: _80.BlockParamsProtoMsg): _80.BlockParams;
            toProto(message: _80.BlockParams): Uint8Array;
            toProtoMsg(message: _80.BlockParams): _80.BlockParamsProtoMsg;
        };
        LastCommitInfo: {
            typeUrl: string;
            is(o: any): o is _80.LastCommitInfo;
            isSDK(o: any): o is _80.LastCommitInfoSDKType;
            isAmino(o: any): o is _80.LastCommitInfoAmino;
            encode(message: _80.LastCommitInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.LastCommitInfo;
            fromJSON(object: any): _80.LastCommitInfo;
            toJSON(message: _80.LastCommitInfo): import("..").JsonSafe<_80.LastCommitInfo>;
            fromPartial(object: Partial<_80.LastCommitInfo>): _80.LastCommitInfo;
            fromAmino(object: _80.LastCommitInfoAmino): _80.LastCommitInfo;
            toAmino(message: _80.LastCommitInfo): _80.LastCommitInfoAmino;
            fromAminoMsg(object: _80.LastCommitInfoAminoMsg): _80.LastCommitInfo;
            fromProtoMsg(message: _80.LastCommitInfoProtoMsg): _80.LastCommitInfo;
            toProto(message: _80.LastCommitInfo): Uint8Array;
            toProtoMsg(message: _80.LastCommitInfo): _80.LastCommitInfoProtoMsg;
        };
        Event: {
            typeUrl: string;
            is(o: any): o is _80.Event;
            isSDK(o: any): o is _80.EventSDKType;
            isAmino(o: any): o is _80.EventAmino;
            encode(message: _80.Event, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.Event;
            fromJSON(object: any): _80.Event;
            toJSON(message: _80.Event): import("..").JsonSafe<_80.Event>;
            fromPartial(object: Partial<_80.Event>): _80.Event;
            fromAmino(object: _80.EventAmino): _80.Event;
            toAmino(message: _80.Event): _80.EventAmino;
            fromAminoMsg(object: _80.EventAminoMsg): _80.Event;
            fromProtoMsg(message: _80.EventProtoMsg): _80.Event;
            toProto(message: _80.Event): Uint8Array;
            toProtoMsg(message: _80.Event): _80.EventProtoMsg;
        };
        EventAttribute: {
            typeUrl: string;
            is(o: any): o is _80.EventAttribute;
            isSDK(o: any): o is _80.EventAttributeSDKType;
            isAmino(o: any): o is _80.EventAttributeAmino;
            encode(message: _80.EventAttribute, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.EventAttribute;
            fromJSON(object: any): _80.EventAttribute;
            toJSON(message: _80.EventAttribute): import("..").JsonSafe<_80.EventAttribute>;
            fromPartial(object: Partial<_80.EventAttribute>): _80.EventAttribute;
            fromAmino(object: _80.EventAttributeAmino): _80.EventAttribute;
            toAmino(message: _80.EventAttribute): _80.EventAttributeAmino;
            fromAminoMsg(object: _80.EventAttributeAminoMsg): _80.EventAttribute;
            fromProtoMsg(message: _80.EventAttributeProtoMsg): _80.EventAttribute;
            toProto(message: _80.EventAttribute): Uint8Array;
            toProtoMsg(message: _80.EventAttribute): _80.EventAttributeProtoMsg;
        };
        TxResult: {
            typeUrl: string;
            is(o: any): o is _80.TxResult;
            isSDK(o: any): o is _80.TxResultSDKType;
            isAmino(o: any): o is _80.TxResultAmino;
            encode(message: _80.TxResult, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.TxResult;
            fromJSON(object: any): _80.TxResult;
            toJSON(message: _80.TxResult): import("..").JsonSafe<_80.TxResult>;
            fromPartial(object: Partial<_80.TxResult>): _80.TxResult;
            fromAmino(object: _80.TxResultAmino): _80.TxResult;
            toAmino(message: _80.TxResult): _80.TxResultAmino;
            fromAminoMsg(object: _80.TxResultAminoMsg): _80.TxResult;
            fromProtoMsg(message: _80.TxResultProtoMsg): _80.TxResult;
            toProto(message: _80.TxResult): Uint8Array;
            toProtoMsg(message: _80.TxResult): _80.TxResultProtoMsg;
        };
        Validator: {
            typeUrl: string;
            is(o: any): o is _80.Validator;
            isSDK(o: any): o is _80.ValidatorSDKType;
            isAmino(o: any): o is _80.ValidatorAmino;
            encode(message: _80.Validator, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.Validator;
            fromJSON(object: any): _80.Validator;
            toJSON(message: _80.Validator): import("..").JsonSafe<_80.Validator>;
            fromPartial(object: Partial<_80.Validator>): _80.Validator;
            fromAmino(object: _80.ValidatorAmino): _80.Validator;
            toAmino(message: _80.Validator): _80.ValidatorAmino;
            fromAminoMsg(object: _80.ValidatorAminoMsg): _80.Validator;
            fromProtoMsg(message: _80.ValidatorProtoMsg): _80.Validator;
            toProto(message: _80.Validator): Uint8Array;
            toProtoMsg(message: _80.Validator): _80.ValidatorProtoMsg;
        };
        ValidatorUpdate: {
            typeUrl: string;
            is(o: any): o is _80.ValidatorUpdate;
            isSDK(o: any): o is _80.ValidatorUpdateSDKType;
            isAmino(o: any): o is _80.ValidatorUpdateAmino;
            encode(message: _80.ValidatorUpdate, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.ValidatorUpdate;
            fromJSON(object: any): _80.ValidatorUpdate;
            toJSON(message: _80.ValidatorUpdate): import("..").JsonSafe<_80.ValidatorUpdate>;
            fromPartial(object: Partial<_80.ValidatorUpdate>): _80.ValidatorUpdate;
            fromAmino(object: _80.ValidatorUpdateAmino): _80.ValidatorUpdate;
            toAmino(message: _80.ValidatorUpdate): _80.ValidatorUpdateAmino;
            fromAminoMsg(object: _80.ValidatorUpdateAminoMsg): _80.ValidatorUpdate;
            fromProtoMsg(message: _80.ValidatorUpdateProtoMsg): _80.ValidatorUpdate;
            toProto(message: _80.ValidatorUpdate): Uint8Array;
            toProtoMsg(message: _80.ValidatorUpdate): _80.ValidatorUpdateProtoMsg;
        };
        VoteInfo: {
            typeUrl: string;
            is(o: any): o is _80.VoteInfo;
            isSDK(o: any): o is _80.VoteInfoSDKType;
            isAmino(o: any): o is _80.VoteInfoAmino;
            encode(message: _80.VoteInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.VoteInfo;
            fromJSON(object: any): _80.VoteInfo;
            toJSON(message: _80.VoteInfo): import("..").JsonSafe<_80.VoteInfo>;
            fromPartial(object: Partial<_80.VoteInfo>): _80.VoteInfo;
            fromAmino(object: _80.VoteInfoAmino): _80.VoteInfo;
            toAmino(message: _80.VoteInfo): _80.VoteInfoAmino;
            fromAminoMsg(object: _80.VoteInfoAminoMsg): _80.VoteInfo;
            fromProtoMsg(message: _80.VoteInfoProtoMsg): _80.VoteInfo;
            toProto(message: _80.VoteInfo): Uint8Array;
            toProtoMsg(message: _80.VoteInfo): _80.VoteInfoProtoMsg;
        };
        Evidence: {
            typeUrl: string;
            is(o: any): o is _80.Evidence;
            isSDK(o: any): o is _80.EvidenceSDKType;
            isAmino(o: any): o is _80.EvidenceAmino;
            encode(message: _80.Evidence, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.Evidence;
            fromJSON(object: any): _80.Evidence;
            toJSON(message: _80.Evidence): import("..").JsonSafe<_80.Evidence>;
            fromPartial(object: Partial<_80.Evidence>): _80.Evidence;
            fromAmino(object: _80.EvidenceAmino): _80.Evidence;
            toAmino(message: _80.Evidence): _80.EvidenceAmino;
            fromAminoMsg(object: _80.EvidenceAminoMsg): _80.Evidence;
            fromProtoMsg(message: _80.EvidenceProtoMsg): _80.Evidence;
            toProto(message: _80.Evidence): Uint8Array;
            toProtoMsg(message: _80.Evidence): _80.EvidenceProtoMsg;
        };
        Snapshot: {
            typeUrl: string;
            is(o: any): o is _80.Snapshot;
            isSDK(o: any): o is _80.SnapshotSDKType;
            isAmino(o: any): o is _80.SnapshotAmino;
            encode(message: _80.Snapshot, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _80.Snapshot;
            fromJSON(object: any): _80.Snapshot;
            toJSON(message: _80.Snapshot): import("..").JsonSafe<_80.Snapshot>;
            fromPartial(object: Partial<_80.Snapshot>): _80.Snapshot;
            fromAmino(object: _80.SnapshotAmino): _80.Snapshot;
            toAmino(message: _80.Snapshot): _80.SnapshotAmino;
            fromAminoMsg(object: _80.SnapshotAminoMsg): _80.Snapshot;
            fromProtoMsg(message: _80.SnapshotProtoMsg): _80.Snapshot;
            toProto(message: _80.Snapshot): Uint8Array;
            toProtoMsg(message: _80.Snapshot): _80.SnapshotProtoMsg;
        };
    };
    const crypto: {
        Proof: {
            typeUrl: string;
            is(o: any): o is _82.Proof;
            isSDK(o: any): o is _82.ProofSDKType;
            isAmino(o: any): o is _82.ProofAmino;
            encode(message: _82.Proof, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _82.Proof;
            fromJSON(object: any): _82.Proof;
            toJSON(message: _82.Proof): import("..").JsonSafe<_82.Proof>;
            fromPartial(object: Partial<_82.Proof>): _82.Proof;
            fromAmino(object: _82.ProofAmino): _82.Proof;
            toAmino(message: _82.Proof): _82.ProofAmino;
            fromAminoMsg(object: _82.ProofAminoMsg): _82.Proof;
            fromProtoMsg(message: _82.ProofProtoMsg): _82.Proof;
            toProto(message: _82.Proof): Uint8Array;
            toProtoMsg(message: _82.Proof): _82.ProofProtoMsg;
        };
        ValueOp: {
            typeUrl: string;
            is(o: any): o is _82.ValueOp;
            isSDK(o: any): o is _82.ValueOpSDKType;
            isAmino(o: any): o is _82.ValueOpAmino;
            encode(message: _82.ValueOp, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _82.ValueOp;
            fromJSON(object: any): _82.ValueOp;
            toJSON(message: _82.ValueOp): import("..").JsonSafe<_82.ValueOp>;
            fromPartial(object: Partial<_82.ValueOp>): _82.ValueOp;
            fromAmino(object: _82.ValueOpAmino): _82.ValueOp;
            toAmino(message: _82.ValueOp): _82.ValueOpAmino;
            fromAminoMsg(object: _82.ValueOpAminoMsg): _82.ValueOp;
            fromProtoMsg(message: _82.ValueOpProtoMsg): _82.ValueOp;
            toProto(message: _82.ValueOp): Uint8Array;
            toProtoMsg(message: _82.ValueOp): _82.ValueOpProtoMsg;
        };
        DominoOp: {
            typeUrl: string;
            is(o: any): o is _82.DominoOp;
            isSDK(o: any): o is _82.DominoOpSDKType;
            isAmino(o: any): o is _82.DominoOpAmino;
            encode(message: _82.DominoOp, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _82.DominoOp;
            fromJSON(object: any): _82.DominoOp;
            toJSON(message: _82.DominoOp): import("..").JsonSafe<_82.DominoOp>;
            fromPartial(object: Partial<_82.DominoOp>): _82.DominoOp;
            fromAmino(object: _82.DominoOpAmino): _82.DominoOp;
            toAmino(message: _82.DominoOp): _82.DominoOpAmino;
            fromAminoMsg(object: _82.DominoOpAminoMsg): _82.DominoOp;
            fromProtoMsg(message: _82.DominoOpProtoMsg): _82.DominoOp;
            toProto(message: _82.DominoOp): Uint8Array;
            toProtoMsg(message: _82.DominoOp): _82.DominoOpProtoMsg;
        };
        ProofOp: {
            typeUrl: string;
            is(o: any): o is _82.ProofOp;
            isSDK(o: any): o is _82.ProofOpSDKType;
            isAmino(o: any): o is _82.ProofOpAmino;
            encode(message: _82.ProofOp, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _82.ProofOp;
            fromJSON(object: any): _82.ProofOp;
            toJSON(message: _82.ProofOp): import("..").JsonSafe<_82.ProofOp>;
            fromPartial(object: Partial<_82.ProofOp>): _82.ProofOp;
            fromAmino(object: _82.ProofOpAmino): _82.ProofOp;
            toAmino(message: _82.ProofOp): _82.ProofOpAmino;
            fromAminoMsg(object: _82.ProofOpAminoMsg): _82.ProofOp;
            fromProtoMsg(message: _82.ProofOpProtoMsg): _82.ProofOp;
            toProto(message: _82.ProofOp): Uint8Array;
            toProtoMsg(message: _82.ProofOp): _82.ProofOpProtoMsg;
        };
        ProofOps: {
            typeUrl: string;
            is(o: any): o is _82.ProofOps;
            isSDK(o: any): o is _82.ProofOpsSDKType;
            isAmino(o: any): o is _82.ProofOpsAmino;
            encode(message: _82.ProofOps, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _82.ProofOps;
            fromJSON(object: any): _82.ProofOps;
            toJSON(message: _82.ProofOps): import("..").JsonSafe<_82.ProofOps>;
            fromPartial(object: Partial<_82.ProofOps>): _82.ProofOps;
            fromAmino(object: _82.ProofOpsAmino): _82.ProofOps;
            toAmino(message: _82.ProofOps): _82.ProofOpsAmino;
            fromAminoMsg(object: _82.ProofOpsAminoMsg): _82.ProofOps;
            fromProtoMsg(message: _82.ProofOpsProtoMsg): _82.ProofOps;
            toProto(message: _82.ProofOps): Uint8Array;
            toProtoMsg(message: _82.ProofOps): _82.ProofOpsProtoMsg;
        };
        PublicKey: {
            typeUrl: string;
            is(o: any): o is _81.PublicKey;
            isSDK(o: any): o is _81.PublicKeySDKType;
            isAmino(o: any): o is _81.PublicKeyAmino;
            encode(message: _81.PublicKey, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _81.PublicKey;
            fromJSON(object: any): _81.PublicKey;
            toJSON(message: _81.PublicKey): import("..").JsonSafe<_81.PublicKey>;
            fromPartial(object: Partial<_81.PublicKey>): _81.PublicKey;
            fromAmino(object: _81.PublicKeyAmino): _81.PublicKey;
            toAmino(message: _81.PublicKey): _81.PublicKeyAmino;
            fromAminoMsg(object: _81.PublicKeyAminoMsg): _81.PublicKey;
            fromProtoMsg(message: _81.PublicKeyProtoMsg): _81.PublicKey;
            toProto(message: _81.PublicKey): Uint8Array;
            toProtoMsg(message: _81.PublicKey): _81.PublicKeyProtoMsg;
        };
    };
    namespace libs {
        const bits: {
            BitArray: {
                typeUrl: string;
                is(o: any): o is _83.BitArray;
                isSDK(o: any): o is _83.BitArraySDKType;
                isAmino(o: any): o is _83.BitArrayAmino;
                encode(message: _83.BitArray, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: import("..").BinaryReader | Uint8Array, length?: number): _83.BitArray;
                fromJSON(object: any): _83.BitArray;
                toJSON(message: _83.BitArray): import("..").JsonSafe<_83.BitArray>;
                fromPartial(object: Partial<_83.BitArray>): _83.BitArray;
                fromAmino(object: _83.BitArrayAmino): _83.BitArray;
                toAmino(message: _83.BitArray): _83.BitArrayAmino;
                fromAminoMsg(object: _83.BitArrayAminoMsg): _83.BitArray;
                fromProtoMsg(message: _83.BitArrayProtoMsg): _83.BitArray;
                toProto(message: _83.BitArray): Uint8Array;
                toProtoMsg(message: _83.BitArray): _83.BitArrayProtoMsg;
            };
        };
    }
    const p2p: {
        ProtocolVersion: {
            typeUrl: string;
            is(o: any): o is _84.ProtocolVersion;
            isSDK(o: any): o is _84.ProtocolVersionSDKType;
            isAmino(o: any): o is _84.ProtocolVersionAmino;
            encode(message: _84.ProtocolVersion, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _84.ProtocolVersion;
            fromJSON(object: any): _84.ProtocolVersion;
            toJSON(message: _84.ProtocolVersion): import("..").JsonSafe<_84.ProtocolVersion>;
            fromPartial(object: Partial<_84.ProtocolVersion>): _84.ProtocolVersion;
            fromAmino(object: _84.ProtocolVersionAmino): _84.ProtocolVersion;
            toAmino(message: _84.ProtocolVersion): _84.ProtocolVersionAmino;
            fromAminoMsg(object: _84.ProtocolVersionAminoMsg): _84.ProtocolVersion;
            fromProtoMsg(message: _84.ProtocolVersionProtoMsg): _84.ProtocolVersion;
            toProto(message: _84.ProtocolVersion): Uint8Array;
            toProtoMsg(message: _84.ProtocolVersion): _84.ProtocolVersionProtoMsg;
        };
        NodeInfo: {
            typeUrl: string;
            is(o: any): o is _84.NodeInfo;
            isSDK(o: any): o is _84.NodeInfoSDKType;
            isAmino(o: any): o is _84.NodeInfoAmino;
            encode(message: _84.NodeInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _84.NodeInfo;
            fromJSON(object: any): _84.NodeInfo;
            toJSON(message: _84.NodeInfo): import("..").JsonSafe<_84.NodeInfo>;
            fromPartial(object: Partial<_84.NodeInfo>): _84.NodeInfo;
            fromAmino(object: _84.NodeInfoAmino): _84.NodeInfo;
            toAmino(message: _84.NodeInfo): _84.NodeInfoAmino;
            fromAminoMsg(object: _84.NodeInfoAminoMsg): _84.NodeInfo;
            fromProtoMsg(message: _84.NodeInfoProtoMsg): _84.NodeInfo;
            toProto(message: _84.NodeInfo): Uint8Array;
            toProtoMsg(message: _84.NodeInfo): _84.NodeInfoProtoMsg;
        };
        NodeInfoOther: {
            typeUrl: string;
            is(o: any): o is _84.NodeInfoOther;
            isSDK(o: any): o is _84.NodeInfoOtherSDKType;
            isAmino(o: any): o is _84.NodeInfoOtherAmino;
            encode(message: _84.NodeInfoOther, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _84.NodeInfoOther;
            fromJSON(object: any): _84.NodeInfoOther;
            toJSON(message: _84.NodeInfoOther): import("..").JsonSafe<_84.NodeInfoOther>;
            fromPartial(object: Partial<_84.NodeInfoOther>): _84.NodeInfoOther;
            fromAmino(object: _84.NodeInfoOtherAmino): _84.NodeInfoOther;
            toAmino(message: _84.NodeInfoOther): _84.NodeInfoOtherAmino;
            fromAminoMsg(object: _84.NodeInfoOtherAminoMsg): _84.NodeInfoOther;
            fromProtoMsg(message: _84.NodeInfoOtherProtoMsg): _84.NodeInfoOther;
            toProto(message: _84.NodeInfoOther): Uint8Array;
            toProtoMsg(message: _84.NodeInfoOther): _84.NodeInfoOtherProtoMsg;
        };
        PeerInfo: {
            typeUrl: string;
            is(o: any): o is _84.PeerInfo;
            isSDK(o: any): o is _84.PeerInfoSDKType;
            isAmino(o: any): o is _84.PeerInfoAmino;
            encode(message: _84.PeerInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _84.PeerInfo;
            fromJSON(object: any): _84.PeerInfo;
            toJSON(message: _84.PeerInfo): import("..").JsonSafe<_84.PeerInfo>;
            fromPartial(object: Partial<_84.PeerInfo>): _84.PeerInfo;
            fromAmino(object: _84.PeerInfoAmino): _84.PeerInfo;
            toAmino(message: _84.PeerInfo): _84.PeerInfoAmino;
            fromAminoMsg(object: _84.PeerInfoAminoMsg): _84.PeerInfo;
            fromProtoMsg(message: _84.PeerInfoProtoMsg): _84.PeerInfo;
            toProto(message: _84.PeerInfo): Uint8Array;
            toProtoMsg(message: _84.PeerInfo): _84.PeerInfoProtoMsg;
        };
        PeerAddressInfo: {
            typeUrl: string;
            is(o: any): o is _84.PeerAddressInfo;
            isSDK(o: any): o is _84.PeerAddressInfoSDKType;
            isAmino(o: any): o is _84.PeerAddressInfoAmino;
            encode(message: _84.PeerAddressInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _84.PeerAddressInfo;
            fromJSON(object: any): _84.PeerAddressInfo;
            toJSON(message: _84.PeerAddressInfo): import("..").JsonSafe<_84.PeerAddressInfo>;
            fromPartial(object: Partial<_84.PeerAddressInfo>): _84.PeerAddressInfo;
            fromAmino(object: _84.PeerAddressInfoAmino): _84.PeerAddressInfo;
            toAmino(message: _84.PeerAddressInfo): _84.PeerAddressInfoAmino;
            fromAminoMsg(object: _84.PeerAddressInfoAminoMsg): _84.PeerAddressInfo;
            fromProtoMsg(message: _84.PeerAddressInfoProtoMsg): _84.PeerAddressInfo;
            toProto(message: _84.PeerAddressInfo): Uint8Array;
            toProtoMsg(message: _84.PeerAddressInfo): _84.PeerAddressInfoProtoMsg;
        };
    };
    const types: {
        ValidatorSet: {
            typeUrl: string;
            is(o: any): o is _89.ValidatorSet;
            isSDK(o: any): o is _89.ValidatorSetSDKType;
            isAmino(o: any): o is _89.ValidatorSetAmino;
            encode(message: _89.ValidatorSet, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _89.ValidatorSet;
            fromJSON(object: any): _89.ValidatorSet;
            toJSON(message: _89.ValidatorSet): import("..").JsonSafe<_89.ValidatorSet>;
            fromPartial(object: Partial<_89.ValidatorSet>): _89.ValidatorSet;
            fromAmino(object: _89.ValidatorSetAmino): _89.ValidatorSet;
            toAmino(message: _89.ValidatorSet): _89.ValidatorSetAmino;
            fromAminoMsg(object: _89.ValidatorSetAminoMsg): _89.ValidatorSet;
            fromProtoMsg(message: _89.ValidatorSetProtoMsg): _89.ValidatorSet;
            toProto(message: _89.ValidatorSet): Uint8Array;
            toProtoMsg(message: _89.ValidatorSet): _89.ValidatorSetProtoMsg;
        };
        Validator: {
            typeUrl: string;
            is(o: any): o is _89.Validator;
            isSDK(o: any): o is _89.ValidatorSDKType;
            isAmino(o: any): o is _89.ValidatorAmino;
            encode(message: _89.Validator, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _89.Validator;
            fromJSON(object: any): _89.Validator;
            toJSON(message: _89.Validator): import("..").JsonSafe<_89.Validator>;
            fromPartial(object: Partial<_89.Validator>): _89.Validator;
            fromAmino(object: _89.ValidatorAmino): _89.Validator;
            toAmino(message: _89.Validator): _89.ValidatorAmino;
            fromAminoMsg(object: _89.ValidatorAminoMsg): _89.Validator;
            fromProtoMsg(message: _89.ValidatorProtoMsg): _89.Validator;
            toProto(message: _89.Validator): Uint8Array;
            toProtoMsg(message: _89.Validator): _89.ValidatorProtoMsg;
        };
        SimpleValidator: {
            typeUrl: string;
            is(o: any): o is _89.SimpleValidator;
            isSDK(o: any): o is _89.SimpleValidatorSDKType;
            isAmino(o: any): o is _89.SimpleValidatorAmino;
            encode(message: _89.SimpleValidator, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _89.SimpleValidator;
            fromJSON(object: any): _89.SimpleValidator;
            toJSON(message: _89.SimpleValidator): import("..").JsonSafe<_89.SimpleValidator>;
            fromPartial(object: Partial<_89.SimpleValidator>): _89.SimpleValidator;
            fromAmino(object: _89.SimpleValidatorAmino): _89.SimpleValidator;
            toAmino(message: _89.SimpleValidator): _89.SimpleValidatorAmino;
            fromAminoMsg(object: _89.SimpleValidatorAminoMsg): _89.SimpleValidator;
            fromProtoMsg(message: _89.SimpleValidatorProtoMsg): _89.SimpleValidator;
            toProto(message: _89.SimpleValidator): Uint8Array;
            toProtoMsg(message: _89.SimpleValidator): _89.SimpleValidatorProtoMsg;
        };
        blockIDFlagFromJSON(object: any): _88.BlockIDFlag;
        blockIDFlagToJSON(object: _88.BlockIDFlag): string;
        signedMsgTypeFromJSON(object: any): _88.SignedMsgType;
        signedMsgTypeToJSON(object: _88.SignedMsgType): string;
        BlockIDFlag: typeof _88.BlockIDFlag;
        BlockIDFlagSDKType: typeof _88.BlockIDFlag;
        BlockIDFlagAmino: typeof _88.BlockIDFlag;
        SignedMsgType: typeof _88.SignedMsgType;
        SignedMsgTypeSDKType: typeof _88.SignedMsgType;
        SignedMsgTypeAmino: typeof _88.SignedMsgType;
        PartSetHeader: {
            typeUrl: string;
            is(o: any): o is _88.PartSetHeader;
            isSDK(o: any): o is _88.PartSetHeaderSDKType;
            isAmino(o: any): o is _88.PartSetHeaderAmino;
            encode(message: _88.PartSetHeader, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.PartSetHeader;
            fromJSON(object: any): _88.PartSetHeader;
            toJSON(message: _88.PartSetHeader): import("..").JsonSafe<_88.PartSetHeader>;
            fromPartial(object: Partial<_88.PartSetHeader>): _88.PartSetHeader;
            fromAmino(object: _88.PartSetHeaderAmino): _88.PartSetHeader;
            toAmino(message: _88.PartSetHeader): _88.PartSetHeaderAmino;
            fromAminoMsg(object: _88.PartSetHeaderAminoMsg): _88.PartSetHeader;
            fromProtoMsg(message: _88.PartSetHeaderProtoMsg): _88.PartSetHeader;
            toProto(message: _88.PartSetHeader): Uint8Array;
            toProtoMsg(message: _88.PartSetHeader): _88.PartSetHeaderProtoMsg;
        };
        Part: {
            typeUrl: string;
            is(o: any): o is _88.Part;
            isSDK(o: any): o is _88.PartSDKType;
            isAmino(o: any): o is _88.PartAmino;
            encode(message: _88.Part, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.Part;
            fromJSON(object: any): _88.Part;
            toJSON(message: _88.Part): import("..").JsonSafe<_88.Part>;
            fromPartial(object: Partial<_88.Part>): _88.Part;
            fromAmino(object: _88.PartAmino): _88.Part;
            toAmino(message: _88.Part): _88.PartAmino;
            fromAminoMsg(object: _88.PartAminoMsg): _88.Part;
            fromProtoMsg(message: _88.PartProtoMsg): _88.Part;
            toProto(message: _88.Part): Uint8Array;
            toProtoMsg(message: _88.Part): _88.PartProtoMsg;
        };
        BlockID: {
            typeUrl: string;
            is(o: any): o is _88.BlockID;
            isSDK(o: any): o is _88.BlockIDSDKType;
            isAmino(o: any): o is _88.BlockIDAmino;
            encode(message: _88.BlockID, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.BlockID;
            fromJSON(object: any): _88.BlockID;
            toJSON(message: _88.BlockID): import("..").JsonSafe<_88.BlockID>;
            fromPartial(object: Partial<_88.BlockID>): _88.BlockID;
            fromAmino(object: _88.BlockIDAmino): _88.BlockID;
            toAmino(message: _88.BlockID): _88.BlockIDAmino;
            fromAminoMsg(object: _88.BlockIDAminoMsg): _88.BlockID;
            fromProtoMsg(message: _88.BlockIDProtoMsg): _88.BlockID;
            toProto(message: _88.BlockID): Uint8Array;
            toProtoMsg(message: _88.BlockID): _88.BlockIDProtoMsg;
        };
        Header: {
            typeUrl: string;
            is(o: any): o is _88.Header;
            isSDK(o: any): o is _88.HeaderSDKType;
            isAmino(o: any): o is _88.HeaderAmino;
            encode(message: _88.Header, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.Header;
            fromJSON(object: any): _88.Header;
            toJSON(message: _88.Header): import("..").JsonSafe<_88.Header>;
            fromPartial(object: Partial<_88.Header>): _88.Header;
            fromAmino(object: _88.HeaderAmino): _88.Header;
            toAmino(message: _88.Header): _88.HeaderAmino;
            fromAminoMsg(object: _88.HeaderAminoMsg): _88.Header;
            fromProtoMsg(message: _88.HeaderProtoMsg): _88.Header;
            toProto(message: _88.Header): Uint8Array;
            toProtoMsg(message: _88.Header): _88.HeaderProtoMsg;
        };
        Data: {
            typeUrl: string;
            is(o: any): o is _88.Data;
            isSDK(o: any): o is _88.DataSDKType;
            isAmino(o: any): o is _88.DataAmino;
            encode(message: _88.Data, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.Data;
            fromJSON(object: any): _88.Data;
            toJSON(message: _88.Data): import("..").JsonSafe<_88.Data>;
            fromPartial(object: Partial<_88.Data>): _88.Data;
            fromAmino(object: _88.DataAmino): _88.Data;
            toAmino(message: _88.Data): _88.DataAmino;
            fromAminoMsg(object: _88.DataAminoMsg): _88.Data;
            fromProtoMsg(message: _88.DataProtoMsg): _88.Data;
            toProto(message: _88.Data): Uint8Array;
            toProtoMsg(message: _88.Data): _88.DataProtoMsg;
        };
        Vote: {
            typeUrl: string;
            is(o: any): o is _88.Vote;
            isSDK(o: any): o is _88.VoteSDKType;
            isAmino(o: any): o is _88.VoteAmino;
            encode(message: _88.Vote, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.Vote;
            fromJSON(object: any): _88.Vote;
            toJSON(message: _88.Vote): import("..").JsonSafe<_88.Vote>;
            fromPartial(object: Partial<_88.Vote>): _88.Vote;
            fromAmino(object: _88.VoteAmino): _88.Vote;
            toAmino(message: _88.Vote): _88.VoteAmino;
            fromAminoMsg(object: _88.VoteAminoMsg): _88.Vote;
            fromProtoMsg(message: _88.VoteProtoMsg): _88.Vote;
            toProto(message: _88.Vote): Uint8Array;
            toProtoMsg(message: _88.Vote): _88.VoteProtoMsg;
        };
        Commit: {
            typeUrl: string;
            is(o: any): o is _88.Commit;
            isSDK(o: any): o is _88.CommitSDKType;
            isAmino(o: any): o is _88.CommitAmino;
            encode(message: _88.Commit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.Commit;
            fromJSON(object: any): _88.Commit;
            toJSON(message: _88.Commit): import("..").JsonSafe<_88.Commit>;
            fromPartial(object: Partial<_88.Commit>): _88.Commit;
            fromAmino(object: _88.CommitAmino): _88.Commit;
            toAmino(message: _88.Commit): _88.CommitAmino;
            fromAminoMsg(object: _88.CommitAminoMsg): _88.Commit;
            fromProtoMsg(message: _88.CommitProtoMsg): _88.Commit;
            toProto(message: _88.Commit): Uint8Array;
            toProtoMsg(message: _88.Commit): _88.CommitProtoMsg;
        };
        CommitSig: {
            typeUrl: string;
            is(o: any): o is _88.CommitSig;
            isSDK(o: any): o is _88.CommitSigSDKType;
            isAmino(o: any): o is _88.CommitSigAmino;
            encode(message: _88.CommitSig, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.CommitSig;
            fromJSON(object: any): _88.CommitSig;
            toJSON(message: _88.CommitSig): import("..").JsonSafe<_88.CommitSig>;
            fromPartial(object: Partial<_88.CommitSig>): _88.CommitSig;
            fromAmino(object: _88.CommitSigAmino): _88.CommitSig;
            toAmino(message: _88.CommitSig): _88.CommitSigAmino;
            fromAminoMsg(object: _88.CommitSigAminoMsg): _88.CommitSig;
            fromProtoMsg(message: _88.CommitSigProtoMsg): _88.CommitSig;
            toProto(message: _88.CommitSig): Uint8Array;
            toProtoMsg(message: _88.CommitSig): _88.CommitSigProtoMsg;
        };
        Proposal: {
            typeUrl: string;
            is(o: any): o is _88.Proposal;
            isSDK(o: any): o is _88.ProposalSDKType;
            isAmino(o: any): o is _88.ProposalAmino;
            encode(message: _88.Proposal, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.Proposal;
            fromJSON(object: any): _88.Proposal;
            toJSON(message: _88.Proposal): import("..").JsonSafe<_88.Proposal>;
            fromPartial(object: Partial<_88.Proposal>): _88.Proposal;
            fromAmino(object: _88.ProposalAmino): _88.Proposal;
            toAmino(message: _88.Proposal): _88.ProposalAmino;
            fromAminoMsg(object: _88.ProposalAminoMsg): _88.Proposal;
            fromProtoMsg(message: _88.ProposalProtoMsg): _88.Proposal;
            toProto(message: _88.Proposal): Uint8Array;
            toProtoMsg(message: _88.Proposal): _88.ProposalProtoMsg;
        };
        SignedHeader: {
            typeUrl: string;
            is(o: any): o is _88.SignedHeader;
            isSDK(o: any): o is _88.SignedHeaderSDKType;
            isAmino(o: any): o is _88.SignedHeaderAmino;
            encode(message: _88.SignedHeader, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.SignedHeader;
            fromJSON(object: any): _88.SignedHeader;
            toJSON(message: _88.SignedHeader): import("..").JsonSafe<_88.SignedHeader>;
            fromPartial(object: Partial<_88.SignedHeader>): _88.SignedHeader;
            fromAmino(object: _88.SignedHeaderAmino): _88.SignedHeader;
            toAmino(message: _88.SignedHeader): _88.SignedHeaderAmino;
            fromAminoMsg(object: _88.SignedHeaderAminoMsg): _88.SignedHeader;
            fromProtoMsg(message: _88.SignedHeaderProtoMsg): _88.SignedHeader;
            toProto(message: _88.SignedHeader): Uint8Array;
            toProtoMsg(message: _88.SignedHeader): _88.SignedHeaderProtoMsg;
        };
        LightBlock: {
            typeUrl: string;
            is(o: any): o is _88.LightBlock;
            isSDK(o: any): o is _88.LightBlockSDKType;
            isAmino(o: any): o is _88.LightBlockAmino;
            encode(message: _88.LightBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.LightBlock;
            fromJSON(object: any): _88.LightBlock;
            toJSON(message: _88.LightBlock): import("..").JsonSafe<_88.LightBlock>;
            fromPartial(object: Partial<_88.LightBlock>): _88.LightBlock;
            fromAmino(object: _88.LightBlockAmino): _88.LightBlock;
            toAmino(message: _88.LightBlock): _88.LightBlockAmino;
            fromAminoMsg(object: _88.LightBlockAminoMsg): _88.LightBlock;
            fromProtoMsg(message: _88.LightBlockProtoMsg): _88.LightBlock;
            toProto(message: _88.LightBlock): Uint8Array;
            toProtoMsg(message: _88.LightBlock): _88.LightBlockProtoMsg;
        };
        BlockMeta: {
            typeUrl: string;
            is(o: any): o is _88.BlockMeta;
            isSDK(o: any): o is _88.BlockMetaSDKType;
            isAmino(o: any): o is _88.BlockMetaAmino;
            encode(message: _88.BlockMeta, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.BlockMeta;
            fromJSON(object: any): _88.BlockMeta;
            toJSON(message: _88.BlockMeta): import("..").JsonSafe<_88.BlockMeta>;
            fromPartial(object: Partial<_88.BlockMeta>): _88.BlockMeta;
            fromAmino(object: _88.BlockMetaAmino): _88.BlockMeta;
            toAmino(message: _88.BlockMeta): _88.BlockMetaAmino;
            fromAminoMsg(object: _88.BlockMetaAminoMsg): _88.BlockMeta;
            fromProtoMsg(message: _88.BlockMetaProtoMsg): _88.BlockMeta;
            toProto(message: _88.BlockMeta): Uint8Array;
            toProtoMsg(message: _88.BlockMeta): _88.BlockMetaProtoMsg;
        };
        TxProof: {
            typeUrl: string;
            is(o: any): o is _88.TxProof;
            isSDK(o: any): o is _88.TxProofSDKType;
            isAmino(o: any): o is _88.TxProofAmino;
            encode(message: _88.TxProof, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _88.TxProof;
            fromJSON(object: any): _88.TxProof;
            toJSON(message: _88.TxProof): import("..").JsonSafe<_88.TxProof>;
            fromPartial(object: Partial<_88.TxProof>): _88.TxProof;
            fromAmino(object: _88.TxProofAmino): _88.TxProof;
            toAmino(message: _88.TxProof): _88.TxProofAmino;
            fromAminoMsg(object: _88.TxProofAminoMsg): _88.TxProof;
            fromProtoMsg(message: _88.TxProofProtoMsg): _88.TxProof;
            toProto(message: _88.TxProof): Uint8Array;
            toProtoMsg(message: _88.TxProof): _88.TxProofProtoMsg;
        };
        ConsensusParams: {
            typeUrl: string;
            is(o: any): o is _87.ConsensusParams;
            isSDK(o: any): o is _87.ConsensusParamsSDKType;
            isAmino(o: any): o is _87.ConsensusParamsAmino;
            encode(message: _87.ConsensusParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _87.ConsensusParams;
            fromJSON(object: any): _87.ConsensusParams;
            toJSON(message: _87.ConsensusParams): import("..").JsonSafe<_87.ConsensusParams>;
            fromPartial(object: Partial<_87.ConsensusParams>): _87.ConsensusParams;
            fromAmino(object: _87.ConsensusParamsAmino): _87.ConsensusParams;
            toAmino(message: _87.ConsensusParams): _87.ConsensusParamsAmino;
            fromAminoMsg(object: _87.ConsensusParamsAminoMsg): _87.ConsensusParams;
            fromProtoMsg(message: _87.ConsensusParamsProtoMsg): _87.ConsensusParams;
            toProto(message: _87.ConsensusParams): Uint8Array;
            toProtoMsg(message: _87.ConsensusParams): _87.ConsensusParamsProtoMsg;
        };
        BlockParams: {
            typeUrl: string;
            is(o: any): o is _87.BlockParams;
            isSDK(o: any): o is _87.BlockParamsSDKType;
            isAmino(o: any): o is _87.BlockParamsAmino;
            encode(message: _87.BlockParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _87.BlockParams;
            fromJSON(object: any): _87.BlockParams;
            toJSON(message: _87.BlockParams): import("..").JsonSafe<_87.BlockParams>;
            fromPartial(object: Partial<_87.BlockParams>): _87.BlockParams;
            fromAmino(object: _87.BlockParamsAmino): _87.BlockParams;
            toAmino(message: _87.BlockParams): _87.BlockParamsAmino;
            fromAminoMsg(object: _87.BlockParamsAminoMsg): _87.BlockParams;
            fromProtoMsg(message: _87.BlockParamsProtoMsg): _87.BlockParams;
            toProto(message: _87.BlockParams): Uint8Array;
            toProtoMsg(message: _87.BlockParams): _87.BlockParamsProtoMsg;
        };
        EvidenceParams: {
            typeUrl: string;
            is(o: any): o is _87.EvidenceParams;
            isSDK(o: any): o is _87.EvidenceParamsSDKType;
            isAmino(o: any): o is _87.EvidenceParamsAmino;
            encode(message: _87.EvidenceParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _87.EvidenceParams;
            fromJSON(object: any): _87.EvidenceParams;
            toJSON(message: _87.EvidenceParams): import("..").JsonSafe<_87.EvidenceParams>;
            fromPartial(object: Partial<_87.EvidenceParams>): _87.EvidenceParams;
            fromAmino(object: _87.EvidenceParamsAmino): _87.EvidenceParams;
            toAmino(message: _87.EvidenceParams): _87.EvidenceParamsAmino;
            fromAminoMsg(object: _87.EvidenceParamsAminoMsg): _87.EvidenceParams;
            fromProtoMsg(message: _87.EvidenceParamsProtoMsg): _87.EvidenceParams;
            toProto(message: _87.EvidenceParams): Uint8Array;
            toProtoMsg(message: _87.EvidenceParams): _87.EvidenceParamsProtoMsg;
        };
        ValidatorParams: {
            typeUrl: string;
            is(o: any): o is _87.ValidatorParams;
            isSDK(o: any): o is _87.ValidatorParamsSDKType;
            isAmino(o: any): o is _87.ValidatorParamsAmino;
            encode(message: _87.ValidatorParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _87.ValidatorParams;
            fromJSON(object: any): _87.ValidatorParams;
            toJSON(message: _87.ValidatorParams): import("..").JsonSafe<_87.ValidatorParams>;
            fromPartial(object: Partial<_87.ValidatorParams>): _87.ValidatorParams;
            fromAmino(object: _87.ValidatorParamsAmino): _87.ValidatorParams;
            toAmino(message: _87.ValidatorParams): _87.ValidatorParamsAmino;
            fromAminoMsg(object: _87.ValidatorParamsAminoMsg): _87.ValidatorParams;
            fromProtoMsg(message: _87.ValidatorParamsProtoMsg): _87.ValidatorParams;
            toProto(message: _87.ValidatorParams): Uint8Array;
            toProtoMsg(message: _87.ValidatorParams): _87.ValidatorParamsProtoMsg;
        };
        VersionParams: {
            typeUrl: string;
            is(o: any): o is _87.VersionParams;
            isSDK(o: any): o is _87.VersionParamsSDKType;
            isAmino(o: any): o is _87.VersionParamsAmino;
            encode(message: _87.VersionParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _87.VersionParams;
            fromJSON(object: any): _87.VersionParams;
            toJSON(message: _87.VersionParams): import("..").JsonSafe<_87.VersionParams>;
            fromPartial(object: Partial<_87.VersionParams>): _87.VersionParams;
            fromAmino(object: _87.VersionParamsAmino): _87.VersionParams;
            toAmino(message: _87.VersionParams): _87.VersionParamsAmino;
            fromAminoMsg(object: _87.VersionParamsAminoMsg): _87.VersionParams;
            fromProtoMsg(message: _87.VersionParamsProtoMsg): _87.VersionParams;
            toProto(message: _87.VersionParams): Uint8Array;
            toProtoMsg(message: _87.VersionParams): _87.VersionParamsProtoMsg;
        };
        HashedParams: {
            typeUrl: string;
            is(o: any): o is _87.HashedParams;
            isSDK(o: any): o is _87.HashedParamsSDKType;
            isAmino(o: any): o is _87.HashedParamsAmino;
            encode(message: _87.HashedParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _87.HashedParams;
            fromJSON(object: any): _87.HashedParams;
            toJSON(message: _87.HashedParams): import("..").JsonSafe<_87.HashedParams>;
            fromPartial(object: Partial<_87.HashedParams>): _87.HashedParams;
            fromAmino(object: _87.HashedParamsAmino): _87.HashedParams;
            toAmino(message: _87.HashedParams): _87.HashedParamsAmino;
            fromAminoMsg(object: _87.HashedParamsAminoMsg): _87.HashedParams;
            fromProtoMsg(message: _87.HashedParamsProtoMsg): _87.HashedParams;
            toProto(message: _87.HashedParams): Uint8Array;
            toProtoMsg(message: _87.HashedParams): _87.HashedParamsProtoMsg;
        };
        Evidence: {
            typeUrl: string;
            is(o: any): o is _86.Evidence;
            isSDK(o: any): o is _86.EvidenceSDKType;
            isAmino(o: any): o is _86.EvidenceAmino;
            encode(message: _86.Evidence, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _86.Evidence;
            fromJSON(object: any): _86.Evidence;
            toJSON(message: _86.Evidence): import("..").JsonSafe<_86.Evidence>;
            fromPartial(object: Partial<_86.Evidence>): _86.Evidence;
            fromAmino(object: _86.EvidenceAmino): _86.Evidence;
            toAmino(message: _86.Evidence): _86.EvidenceAmino;
            fromAminoMsg(object: _86.EvidenceAminoMsg): _86.Evidence;
            fromProtoMsg(message: _86.EvidenceProtoMsg): _86.Evidence;
            toProto(message: _86.Evidence): Uint8Array;
            toProtoMsg(message: _86.Evidence): _86.EvidenceProtoMsg;
        };
        DuplicateVoteEvidence: {
            typeUrl: string;
            is(o: any): o is _86.DuplicateVoteEvidence;
            isSDK(o: any): o is _86.DuplicateVoteEvidenceSDKType;
            isAmino(o: any): o is _86.DuplicateVoteEvidenceAmino;
            encode(message: _86.DuplicateVoteEvidence, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _86.DuplicateVoteEvidence;
            fromJSON(object: any): _86.DuplicateVoteEvidence;
            toJSON(message: _86.DuplicateVoteEvidence): import("..").JsonSafe<_86.DuplicateVoteEvidence>;
            fromPartial(object: Partial<_86.DuplicateVoteEvidence>): _86.DuplicateVoteEvidence;
            fromAmino(object: _86.DuplicateVoteEvidenceAmino): _86.DuplicateVoteEvidence;
            toAmino(message: _86.DuplicateVoteEvidence): _86.DuplicateVoteEvidenceAmino;
            fromAminoMsg(object: _86.DuplicateVoteEvidenceAminoMsg): _86.DuplicateVoteEvidence;
            fromProtoMsg(message: _86.DuplicateVoteEvidenceProtoMsg): _86.DuplicateVoteEvidence;
            toProto(message: _86.DuplicateVoteEvidence): Uint8Array;
            toProtoMsg(message: _86.DuplicateVoteEvidence): _86.DuplicateVoteEvidenceProtoMsg;
        };
        LightClientAttackEvidence: {
            typeUrl: string;
            is(o: any): o is _86.LightClientAttackEvidence;
            isSDK(o: any): o is _86.LightClientAttackEvidenceSDKType;
            isAmino(o: any): o is _86.LightClientAttackEvidenceAmino;
            encode(message: _86.LightClientAttackEvidence, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _86.LightClientAttackEvidence;
            fromJSON(object: any): _86.LightClientAttackEvidence;
            toJSON(message: _86.LightClientAttackEvidence): import("..").JsonSafe<_86.LightClientAttackEvidence>;
            fromPartial(object: Partial<_86.LightClientAttackEvidence>): _86.LightClientAttackEvidence;
            fromAmino(object: _86.LightClientAttackEvidenceAmino): _86.LightClientAttackEvidence;
            toAmino(message: _86.LightClientAttackEvidence): _86.LightClientAttackEvidenceAmino;
            fromAminoMsg(object: _86.LightClientAttackEvidenceAminoMsg): _86.LightClientAttackEvidence;
            fromProtoMsg(message: _86.LightClientAttackEvidenceProtoMsg): _86.LightClientAttackEvidence;
            toProto(message: _86.LightClientAttackEvidence): Uint8Array;
            toProtoMsg(message: _86.LightClientAttackEvidence): _86.LightClientAttackEvidenceProtoMsg;
        };
        EvidenceList: {
            typeUrl: string;
            is(o: any): o is _86.EvidenceList;
            isSDK(o: any): o is _86.EvidenceListSDKType;
            isAmino(o: any): o is _86.EvidenceListAmino;
            encode(message: _86.EvidenceList, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _86.EvidenceList;
            fromJSON(object: any): _86.EvidenceList;
            toJSON(message: _86.EvidenceList): import("..").JsonSafe<_86.EvidenceList>;
            fromPartial(object: Partial<_86.EvidenceList>): _86.EvidenceList;
            fromAmino(object: _86.EvidenceListAmino): _86.EvidenceList;
            toAmino(message: _86.EvidenceList): _86.EvidenceListAmino;
            fromAminoMsg(object: _86.EvidenceListAminoMsg): _86.EvidenceList;
            fromProtoMsg(message: _86.EvidenceListProtoMsg): _86.EvidenceList;
            toProto(message: _86.EvidenceList): Uint8Array;
            toProtoMsg(message: _86.EvidenceList): _86.EvidenceListProtoMsg;
        };
        Block: {
            typeUrl: string;
            is(o: any): o is _85.Block;
            isSDK(o: any): o is _85.BlockSDKType;
            isAmino(o: any): o is _85.BlockAmino;
            encode(message: _85.Block, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _85.Block;
            fromJSON(object: any): _85.Block;
            toJSON(message: _85.Block): import("..").JsonSafe<_85.Block>;
            fromPartial(object: Partial<_85.Block>): _85.Block;
            fromAmino(object: _85.BlockAmino): _85.Block;
            toAmino(message: _85.Block): _85.BlockAmino;
            fromAminoMsg(object: _85.BlockAminoMsg): _85.Block;
            fromProtoMsg(message: _85.BlockProtoMsg): _85.Block;
            toProto(message: _85.Block): Uint8Array;
            toProtoMsg(message: _85.Block): _85.BlockProtoMsg;
        };
    };
    const version: {
        App: {
            typeUrl: string;
            is(o: any): o is _90.App;
            isSDK(o: any): o is _90.AppSDKType;
            isAmino(o: any): o is _90.AppAmino;
            encode(message: _90.App, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _90.App;
            fromJSON(object: any): _90.App;
            toJSON(message: _90.App): import("..").JsonSafe<_90.App>;
            fromPartial(object: Partial<_90.App>): _90.App;
            fromAmino(object: _90.AppAmino): _90.App;
            toAmino(message: _90.App): _90.AppAmino;
            fromAminoMsg(object: _90.AppAminoMsg): _90.App;
            fromProtoMsg(message: _90.AppProtoMsg): _90.App;
            toProto(message: _90.App): Uint8Array;
            toProtoMsg(message: _90.App): _90.AppProtoMsg;
        };
        Consensus: {
            typeUrl: string;
            is(o: any): o is _90.Consensus;
            isSDK(o: any): o is _90.ConsensusSDKType;
            isAmino(o: any): o is _90.ConsensusAmino;
            encode(message: _90.Consensus, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _90.Consensus;
            fromJSON(object: any): _90.Consensus;
            toJSON(message: _90.Consensus): import("..").JsonSafe<_90.Consensus>;
            fromPartial(object: Partial<_90.Consensus>): _90.Consensus;
            fromAmino(object: _90.ConsensusAmino): _90.Consensus;
            toAmino(message: _90.Consensus): _90.ConsensusAmino;
            fromAminoMsg(object: _90.ConsensusAminoMsg): _90.Consensus;
            fromProtoMsg(message: _90.ConsensusProtoMsg): _90.Consensus;
            toProto(message: _90.Consensus): Uint8Array;
            toProtoMsg(message: _90.Consensus): _90.ConsensusProtoMsg;
        };
    };
}
